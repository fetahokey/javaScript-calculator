{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","displayContent","setDisplayContent","result","setResult","isEval","setIsEval","canBeDecimal","setCanBeDecimal","opernads","id","key","operator","absOperators","negOperators","allOperators","concat","extraKeys","method","eval","toString","includes","substr","prevState","className","height","display","alignItems","width","border","pt","pr","pl","pb","gap","flexWrap","overflow","p","mb","textAlign","fontFamily","fontSize","map","item","flex","variant","onClick","last2Chars","isLast2CharsNotOperators","replace","style","lastTwoChars","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75e52dec.chunk.js","sourcesContent":["import { Button } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [displayContent, setDisplayContent] = useState<string>(\"0\");\n  const [result, setResult] = useState<Number>(0);\n  const [isEval, setIsEval] = useState<Boolean>(false);\n  const [canBeDecimal, setCanBeDecimal] = useState(true);\n\n  const opernads = [\n    { id: \"zero\", key: \"0\" },\n    { id: \"one\", key: \"1\" },\n    { id: \"two\", key: \"2\" },\n    { id: \"three\", key: \"3\" },\n    { id: \"four\", key: \"4\" },\n    { id: \"five\", key: \"5\" },\n    { id: \"six\", key: \"6\" },\n    { id: \"seven\", key: \"7\" },\n    { id: \"eight\", key: \"8\" },\n    { id: \"nine\", key: \"9\" },\n  ];\n\n  const operator = [\n    { id: \"add\", key: \"+\" },\n    { id: \"subtract\", key: \"-\" },\n    { id: \"multiply\", key: \"*\" },\n    { id: \"divide\", key: \"/\" },\n  ];\n  const absOperators = [\"+\", \"*\", \"/\"];\n  const negOperators = [\"-\"];\n  const allOperators = absOperators.concat(negOperators);\n\n  const extraKeys = [\n    {\n      id: \"equals\",\n      key: \"=\",\n      method: () => {\n        setDisplayContent(eval(displayContent).toString());\n        setIsEval(true);\n        setResult(eval(displayContent).toString());\n        setCanBeDecimal(true);\n      },\n    },\n    {\n      id: \"decimal\",\n      key: \".\",\n      method: () => {\n        if (\n          !allOperators.concat(\".\").includes(displayContent.substr(-1)) &&\n          canBeDecimal\n        ) {\n          setDisplayContent((prevState) => prevState.concat(\".\"));\n          setCanBeDecimal(false);\n        }\n      },\n    },\n    {\n      id: \"clear\",\n      key: \"CE\",\n      method: () => {\n        setIsEval(false);\n        setCanBeDecimal(true);\n        setDisplayContent(\"0\");\n      },\n    },\n  ];\n  return (\n    <Box\n      className=\"App\"\n      id=\"calc-machine\"\n      height=\"100vh\"\n      display=\"flex\"\n      alignItems=\"center\"\n    >\n      <Box\n        id=\"calc\"\n        width=\"200px\"\n        border={1}\n        pt={3}\n        pr={2}\n        pl={2}\n        pb={3}\n        gap=\"1px\"\n        display=\"flex\"\n        flexWrap=\"wrap\"\n      >\n        <Box\n          border={1}\n          width=\"100%\"\n          overflow=\"auto\"\n          p={1}\n          mb={1}\n          textAlign=\"right\"\n          display=\"flex\"\n          flexWrap=\"wrap\"\n          id=\"displayC\"\n          fontFamily=\"Roboto\"\n          fontSize={12}\n        >\n          {displayContent}\n        </Box>\n        <Box\n          border={1}\n          width=\"100%\"\n          overflow=\"auto\"\n          p={1}\n          mb={1}\n          textAlign=\"right\"\n          display=\"flex\"\n          flexWrap=\"wrap\"\n          id=\"display\"\n          fontFamily=\"Roboto\"\n          fontSize={12}\n        >\n          {isEval ? result : displayContent}\n        </Box>\n\n        {extraKeys.map((item) => (\n          <Box flex={1} key={item.id}>\n            <Button variant=\"contained\" id={item.id} onClick={item.method}>\n              {item.key}\n            </Button>\n          </Box>\n        ))}\n        {operator.map((item) => (\n          <Box flex={1} key={item.id}>\n            <Button\n              variant=\"contained\"\n              id={item.id}\n              onClick={() => {\n                setCanBeDecimal(true);\n                const last2Chars = displayContent.substr(-2);\n                const isLast2CharsNotOperators =\n                  !allOperators.includes(last2Chars[0]) ||\n                  !allOperators.includes(last2Chars[1]);\n\n                if (!isLast2CharsNotOperators) {\n                  setDisplayContent((prevState) =>\n                    prevState.replace(/.{0,2}$/, item.key)\n                  );\n                }\n\n                if (isLast2CharsNotOperators) {\n                  if (\n                    absOperators.includes(displayContent.substr(-1)) &&\n                    absOperators.includes(item.key)\n                  ) {\n                    setDisplayContent((prevState) =>\n                      prevState.replace(/.$/, item.key)\n                    );\n                  } else if (\n                    allOperators.includes(displayContent.substr(-1)) &&\n                    negOperators.includes(item.key)\n                  ) {\n                    setDisplayContent((prevState) =>\n                      prevState.concat(item.key)\n                    );\n                  } else if (\n                    absOperators.includes(item.key) &&\n                    negOperators.includes(displayContent.substr(-1))\n                  ) {\n                    setDisplayContent((prevState) =>\n                      prevState.replace(/.$/, item.key)\n                    );\n                  } else {\n                    setDisplayContent((prevState) =>\n                      prevState.concat(item.key)\n                    );\n                  }\n                }\n              }}\n            >\n              {item.key}\n            </Button>\n          </Box>\n        ))}\n        {opernads.map((item) => (\n          <Box flex={1} key={item.id}>\n            <Button\n              variant=\"contained\"\n              id={item.id}\n              style={{ width: \"100%\" }}\n              onClick={() => {\n                const lastTwoChars = displayContent.substr(-2);\n                if (\n                  lastTwoChars.length === 2 &&\n                  negOperators.includes(lastTwoChars[0]) &&\n                  negOperators.includes(lastTwoChars[1])\n                ) {\n                  setDisplayContent((prevState) =>\n                    prevState.replace(/.{0,2}$/, \"+\")\n                  );\n                }\n\n                if (item.key === \"0\" && displayContent === \"0\") {\n                } else if (displayContent === \"0\") {\n                  setDisplayContent(item.key);\n                } else {\n                  setDisplayContent((prevState) => prevState.concat(item.key));\n                }\n              }}\n            >\n              {item.key}\n            </Button>\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}